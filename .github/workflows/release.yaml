name: Releases

on:
  push:
    branches:
      - 'release/[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - 'release/**'
    types: [ labeled ]

jobs:
  check-commit:
    if: (github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'release')))
    runs-on: ubuntu-latest
    outputs:
      is_prepare_release: ${{ steps.commit_message.outputs.is_prepare_release }}
      telepresence_version: ${{ steps.commit_message.outputs.telepresence_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check Commit Message
        id: commit_message
        run: |
          git fetch origin release/v2
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            current_version=$(echo ${{ github.head_ref }} | sed -e "s/^release\///")
            BASE_REF=$(git rev-parse refs/remotes/origin/${{ github.base_ref }})
            HEAD_REF=$(git rev-parse refs/remotes/origin/${{ github.head_ref }})
            echo $BASE_REF
            commit_subject=$(git log "$BASE_REF".."$HEAD_REF" --format=%s | grep -m1 "^Prepare v${current_version}$") || true

            if [[ ! -z "$commit_subject" ]]; then
              echo "GA - Commit found. Remove prepare commit."
              exit 1
            else
              echo "GA - No match found."
              echo "telepresence_version=v$current_version" >> $GITHUB_OUTPUT
              echo "is_prepare_release=1" >> $GITHUB_OUTPUT
            fi

          else
            current_version=$(echo $GITHUB_REF | sed -e "s/^refs\/heads\/release\///")
            commit_subject=$(git log FETCH_HEAD..HEAD --format=%s | grep -m1 "^Prepare v${current_version}\+\(-rc\.[0-9]\+\)\?$") || true

            # If grep doesn't find a match, it will return an empty string
            if [[ ! -z "$commit_subject" ]]; then
              # Check if commit subject matches the pattern and includes the 'v'
              if [[ "$commit_subject" =~ ^Prepare\ (v[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?)$ ]]; then
                version=${BASH_REMATCH[1]}

                # Check if the tag for this version already exists
                if ! git rev-parse "$version" >& /dev/null; then
                  echo "Match found and tag does not exist for: $version"
                  echo "is_prepare_release=0" >> $GITHUB_OUTPUT
                  echo "telepresence_version=$version" >> $GITHUB_OUTPUT

                else
                  echo "Match found but a tag already exists for: $version"
                  echo "is_prepare_release=1" >> $GITHUB_OUTPUT
                fi
              fi
            else
              echo "No match found."
              echo "is_prepare_release=1" >> $GITHUB_OUTPUT
            fi
          fi



  prepare-release:
    if: needs.check-commit.outputs.is_prepare_release == 1
    runs-on: ubuntu-latest
    needs: check-commit
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_AUTO_RELEASE_TOKEN }}
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}

      - name: Get release type
        id: get_release_type
        shell: bash
        run: |
          echo "is_ga=false" >> $GITHUB_ENV
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "is_ga=true" >> $GITHUB_ENV
          fi
      - name: Prepare release
        id: prepare
        uses: ./.github/actions/release/prepare
        with:
          gh_auto_release_token: ${{ secrets.GH_AUTO_RELEASE_TOKEN }}
          gh_auto_release_email: ${{ secrets.GH_AUTO_RELEASE_EMAIL }}
          gh_auto_release_user: ${{ secrets.GH_AUTO_RELEASE_USER }}
          is_ga: ${{ env.is_ga }}
          telepresence_version: ${{ needs.check-commit.outputs.telepresence_version }}

  itests_build_image:
    if: needs.check-commit.outputs.is_prepare_release == 0
    needs:
      - check-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version: '~1.20.7'
      - name: Build dev image
        run: |
          make save-tel2-image
      - name: Upload image
        uses: actions/upload-artifact@v3
        with:
          name: image
          path: build-output/tel2-image.tar
  itests_run:
    strategy:
      fail-fast: false
      matrix:
        runners:
          - ubuntu-latest
          - macos-latest
          - windows-2019
        #          - macOS-arm64
        clusters:
          - distribution: Kubeception
            version: "1.26"
    runs-on: ${{ matrix.runners }}
    needs: itests_build_image
    steps:
      - uses: actions/checkout@v3
  #      - uses: ./.github/actions/install-dependencies
  #        name: install dependencies
  #      - uses: actions/download-artifact@v3
  #        with:
  #          name: image
  #      - run: make build
  #      - uses: ./.github/actions/prepare-cluster
  #        with:
  #          kubeception-token: ${{ secrets.DEV_TELEPRESENCE_KUBECEPTION_TOKEN }}
  #          kubeceptionProfile: small
  #          gke-credentials: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
  #          tel-image: tel2-image.tar
  #          cluster-distribution: ${{ matrix.clusters.distribution }}
  #          cluster-version: ${{ matrix.clusters.version }}
  #        id: kluster
  #      - uses: ./.github/actions/integration-tests
  #        with:
  #          kubeconfig: "${{ steps.kluster.outputs.kubeconfig }}"
  #      - uses: ./.github/actions/upload-logs
  #        env:
  #          LOG_SUFFIX: "-${{ runner.os }}-${{ matrix.clusters.distribution }}-${{ matrix.clusters.version }}"
  #        if: always()


  build-release:
    needs:
      - check-commit
      - itests_run
    strategy:
      fail-fast: false
      matrix:
        runners:
          - ubuntu-latest
          - ubuntu-arm64
          - macos-latest
#          - macOS-arm64
          - windows-2019
    runs-on: ${{ matrix.runners }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: ./.github/actions/install-dependencies
        name: install dependencies
      - name: set version
        shell: bash
        run: echo "TELEPRESENCE_VERSION=${{ needs.check-commit.outputs.telepresence_version }}" >> $GITHUB_ENV
      - name: generate binaries
        run: make release-binary
      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: build-output/release
          retention-days: 1
#      - if: runner.os == 'Linux' && runner.arch == 'X64'
#        name: Upload Docker image
#        run: |
#          docker login -u="${{ secrets.DOCKERHUB_USERNAME }}" -p="${{ secrets.DOCKERHUB_PASSWORD }}"
#          make push-tel2-image
  release:
    runs-on: ubuntu-latest
    needs:
      - build-release
      - check-commit
    env:
      TELEPRESENCE_VERSION: ${{ needs.check-commit.outputs.telepresence_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create tag
        id: create_tag
        run: |
          git config --global user.email "${{ secrets.GH_AUTO_RELEASE_EMAIL }}"
          git config --global user.name "${{ secrets.GH_AUTO_RELEASE_USER }}"
          git tag --annotate --message='${{ env.TELEPRESENCE_VERSION }}' ${{ env.TELEPRESENCE_VERSION }}
          git tag --annotate --message='${{ env.TELEPRESENCE_VERSION }}' rpc/${{ env.TELEPRESENCE_VERSION }}
          git push origin {,rpc/}${{ env.TELEPRESENCE_VERSION }}
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Determine if version is RC or GA
        id: semver_check
        run: |
          if [[ "${{ env.TELEPRESENCE_VERSION }}" =~ ^v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+$ ]]; then
          echo "MAKE_LATEST=false" >> $GITHUB_ENV
          echo "PRERELEASE=true" >> $GITHUB_ENV
          else
          echo "MAKE_LATEST=true" >> $GITHUB_ENV
          echo "PRERELEASE=false" >> $GITHUB_ENV
          fi
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "binaries/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{ env.PRERELEASE }}
          makeLatest: ${{ env.MAKE_LATEST }}
          tag: ${{ env.TELEPRESENCE_VERSION }}
          body: |
            ## Official Release Artifacts
            ### Linux
               - ðŸ“¦ [telepresence-linux-amd64](https://app.getambassador.io/download/tel2oss/releases/download/${{ github.ref_name }}/telepresence-linux-amd64)
               - ðŸ“¦ [telepresence-linux-arm64](https://app.getambassador.io/download/tel2oss/releases/download/${{ github.ref_name }}/telepresence-linux-arm64)
            ### OSX Darwin
               - ðŸ“¦ [telepresence-darwin-amd64](https://app.getambassador.io/download/tel2oss/releases/download/${{ github.ref_name }}/telepresence-darwin-amd64)
               - ðŸ“¦ [telepresence-darwin-arm64](https://app.getambassador.io/download/tel2oss/releases/download/${{ github.ref_name }}/telepresence-darwin-arm64)
            ### Windows
               - ðŸ“¦ [telepresence-windows-amd64.zip](https://app.getambassador.io/download/tel2oss/releases/download/${{ github.ref_name }}/telepresence-windows-amd64.zip)

            For more builds across platforms and architectures, see the `Assets` section below.
            And for more information, visit our [installation docs](https://www.telepresence.io/docs/latest/quick-start/).

            ![Assets](https://static.scarf.sh/a.png?x-pxid=d842651a-2e4d-465a-98e1-4808722c01ab)

#  test-release:
#    needs: release
#    strategy:
#      fail-fast: false
#      matrix:
#        runners:
#          - ubuntu-latest
#          - ubuntu-arm64
#          - macos-latest
#          - macOS-arm64
#          - windows-2019
#    runs-on: ${{ matrix.runners }}
#    steps:
#      - uses: actions/checkout@v3
#      - name: Test release
#        uses: ./.github/actions/test-release
#        with:
#          release_version: ${{ needs.prepare-release.outputs.telepresence_version }}
